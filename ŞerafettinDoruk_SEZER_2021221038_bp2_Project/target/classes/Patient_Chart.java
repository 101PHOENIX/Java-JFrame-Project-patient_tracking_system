/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ŞerafettinDoruk_SEZER_2021221038_bp2_Project;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Lenovo
 */
public class Patient_Chart extends javax.swing.JFrame {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DefaultTableModel tbl_table_model;

    /**
     * Creates new form Patient_Chart
     */
    public Patient_Chart() {
        initComponents();
        // PatientLoginConnection klasındaki PatientLoginConnectionDB fonksiyonunu çalıştırıyor.
        con = PatientLoginConnection.PatientLoginConnectionDB();
        // Uygulamayı sayfanın ortasında başlatıyor.
        this.setLocationRelativeTo(null);

        // Databasede ki değerleri tabloda göstermek için DefaultTableModel oluşturdum ve onları tabloya attım.
        tbl_table_model = new DefaultTableModel();
        tbl_table_model.setColumnIdentifiers(new Object[]{"PatientID", "PatientName", "Gender", "BloodGroup", "Disease", "AdmitDate", "RoomNO", "DoctorID", "DoctorName", "DischargeDate"});
        tbl_patient_chart_Table.setModel(tbl_table_model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPM_ACCOUNTS = new javax.swing.JPopupMenu();
        JPMI_SAVE = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        JPMI_DELETE = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_patient_chart_Table = new javax.swing.JTable();
        btn_update = new javax.swing.JButton();
        btn_Delete = new javax.swing.JButton();
        txt_doctor_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txt_room_no = new javax.swing.JTextField();
        txt_doctor_ıd = new javax.swing.JTextField();
        txt_discharge_date = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txt_disease = new javax.swing.JTextField();
        btn_show_all_data = new javax.swing.JButton();
        cmbb_Blood_Group = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_patıent_ıd = new javax.swing.JTextField();
        JLB_BAŞLIK = new javax.swing.JLabel();
        btn_go_back_main_bridge1 = new javax.swing.JButton();
        txt_fıle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mı_File = new javax.swing.JMenu();
        MI_SAVE = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        MI_CLOSE = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MI_COLOR_CHOSER = new javax.swing.JMenuItem();
        JMI_FILE_CHOOSER = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        JCBM_STARTING_WORK = new javax.swing.JCheckBoxMenuItem();

        JPMI_SAVE.setText("SAVE");
        JPMI_SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPMI_SAVEActionPerformed(evt);
            }
        });
        JPM_ACCOUNTS.add(JPMI_SAVE);
        JPM_ACCOUNTS.add(jSeparator1);

        JPMI_DELETE.setText("DELETE");
        JPMI_DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPMI_DELETEActionPerformed(evt);
            }
        });
        JPM_ACCOUNTS.add(JPMI_DELETE);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        tbl_patient_chart_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_patient_chart_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_patient_chart_TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_patient_chart_Table);

        btn_update.setText("UPDATE");
        btn_update.setEnabled(false);
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_Delete.setText("DELETE");
        btn_Delete.setEnabled(false);
        btn_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setText("Room NO:");

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel15.setText("Doctor ID:");

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setText("Doctor Name:");

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setText("Discharge Date:");

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel18.setText("(DD-MM-YYYY)");

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setText("Disease:");

        btn_show_all_data.setText("SHOW ALL DATA");
        btn_show_all_data.setEnabled(false);
        btn_show_all_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_all_dataActionPerformed(evt);
            }
        });

        cmbb_Blood_Group.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "O+", "O-", "AB+", "AB-", "A+", "A-", "B+", "B-" }));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setText("Blood Group:");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Patient ID:");

        JLB_BAŞLIK.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        JLB_BAŞLIK.setText("PATIENT ADJUSTMENT CENTER");

        btn_go_back_main_bridge1.setText("GO BACK MAIN BRIDGE");
        btn_go_back_main_bridge1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_go_back_main_bridge1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setText("THE LOCATION OF THE FILE WHICH YOU SELECTED");

        mı_File.setText("File");

        MI_SAVE.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK));
        MI_SAVE.setText("SAVE");
        MI_SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_SAVEActionPerformed(evt);
            }
        });
        mı_File.add(MI_SAVE);
        mı_File.add(jSeparator2);

        MI_CLOSE.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_DOWN_MASK));
        MI_CLOSE.setText("CLOSE");
        MI_CLOSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_CLOSEActionPerformed(evt);
            }
        });
        mı_File.add(MI_CLOSE);

        jMenuBar1.add(mı_File);

        jMenu2.setText("File settings");

        MI_COLOR_CHOSER.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK));
        MI_COLOR_CHOSER.setText("COLOR CHOSER");
        MI_COLOR_CHOSER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_COLOR_CHOSERActionPerformed(evt);
            }
        });
        jMenu2.add(MI_COLOR_CHOSER);

        JMI_FILE_CHOOSER.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK));
        JMI_FILE_CHOOSER.setText("FILE CHOOSER");
        JMI_FILE_CHOOSER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMI_FILE_CHOOSERActionPerformed(evt);
            }
        });
        jMenu2.add(JMI_FILE_CHOOSER);
        jMenu2.add(jSeparator3);

        JCBM_STARTING_WORK.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        JCBM_STARTING_WORK.setText("I'M STARTING WORK");
        JCBM_STARTING_WORK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCBM_STARTING_WORKActionPerformed(evt);
            }
        });
        jMenu2.add(JCBM_STARTING_WORK);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(JLB_BAŞLIK, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_fıle)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txt_disease, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                            .addComponent(txt_discharge_date))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(33, 33, 33)
                                                .addComponent(cmbb_Blood_Group, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_patıent_ıd, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(25, 25, 25)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_room_no, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_doctor_ıd, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btn_go_back_main_bridge1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(btn_show_all_data, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 861, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txt_fıle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(JLB_BAŞLIK, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_show_all_data, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_patıent_ıd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbb_Blood_Group, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_room_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_doctor_ıd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_doctor_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_discharge_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_disease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Delete)
                            .addComponent(btn_go_back_main_bridge1)
                            .addComponent(btn_update))))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_patient_chart_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_patient_chart_TableMouseClicked

        // TABLOYA MOUSE TIKLAMA ÖZELLIĞI KAZANDIRMA.
        // AYRICA SEÇTİĞİM DEĞERİ İLGİLİ TEXTLERE ATIYOR.
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_patient_chart_Table.getModel();

        String tbl_Patient_ID = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 0).toString();
        String tbl_Room_no = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 6).toString();
        String tbl_Doctor_ID = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 7).toString();
        String tbl_Doctor_Name = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 8).toString();
        String tbl_Discharge_Date = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 9).toString();
        String tbl_Disease = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 4).toString();

        txt_patıent_ıd.setText(tbl_Patient_ID);
        txt_room_no.setText(tbl_Room_no);
        txt_doctor_ıd.setText(tbl_Doctor_ID);
        txt_doctor_name.setText(tbl_Doctor_Name);
        txt_discharge_date.setText(tbl_Discharge_Date);
        txt_disease.setText(tbl_Disease);

        int i = tbl_patient_chart_Table.getSelectedRow();
        TableModel model = tbl_patient_chart_Table.getModel();
        String subject1 = model.getValueAt(i, 3).toString();
        switch (subject1) {
            case "0+":
                cmbb_Blood_Group.setSelectedIndex(0);
                break;
            case "0-":
                cmbb_Blood_Group.setSelectedIndex(1);
                break;
            case "AB+":
                cmbb_Blood_Group.setSelectedIndex(2);
                break;
            case "AB-":
                cmbb_Blood_Group.setSelectedIndex(3);
                break;
            case "A+":
                cmbb_Blood_Group.setSelectedIndex(4);
                break;
            case "A-":
                cmbb_Blood_Group.setSelectedIndex(5);
                break;
            case "B+":
                cmbb_Blood_Group.setSelectedIndex(6);
                break;
            case "B-":
                cmbb_Blood_Group.setSelectedIndex(7);
                break;

        }

    }//GEN-LAST:event_tbl_patient_chart_TableMouseClicked

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:

        // SEÇTİĞİMİZ DEĞERİ UPDATE KISMI
        try {

            String PatientID = txt_patıent_ıd.getText();
            String bloodValue = cmbb_Blood_Group.getSelectedItem().toString();
            String RoomNO = txt_room_no.getText();
            String DoctorID = txt_doctor_ıd.getText();
            String DoctorName = txt_doctor_name.getText();
            String DischargeDate = txt_discharge_date.getText();
            String Disease = txt_disease.getText();

            String sql = "Update PatientLogin set BloodGroup ='" + bloodValue + "' ,RoomNO ='" + RoomNO + "' ,DoctorID ='" + DoctorID + "' ,DoctorName ='" + DoctorName + "',DischargeDate ='" + DischargeDate + "',Disease ='" + Disease + "'  where PatientID ='" + PatientID + "' ";
            pst = con.prepareStatement(sql);

            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "successfully Update.");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        // YENI DEĞERI TABLOYA YAZMA
        try {
            String PatientID1 = txt_patıent_ıd.getText();
            String DoctorID1 = txt_doctor_ıd.getText();
            Statement st = con.createStatement();
            String sql = "select * from PatientLogin where PatientID ='" + PatientID1 + "' OR DoctorID ='" + DoctorID1 + "'  ";
            rs = st.executeQuery(sql);

            while (rs.next()) {
                String PatientID2 = rs.getString("PatientID");
                String PatientName = rs.getString("PatientName");
                String Gender = rs.getString("Gender");
                String BloodGroup = rs.getString("BloodGroup");
                String Disease = rs.getString("Disease");
                String AdmitDate = rs.getString("AdmitDate");
                String RoomNO = rs.getString("RoomNO");
                String DoctorID2 = rs.getString("DoctorID");
                String DoctorName = rs.getString("DoctorName");
                String DischargeDate = rs.getString("DischargeDate");

                String tbData[] = {PatientID2, PatientName, Gender, BloodGroup, Disease, AdmitDate, RoomNO, DoctorID2, DoctorName, DischargeDate};
                DefaultTableModel tblModel = (DefaultTableModel) tbl_patient_chart_Table.getModel();
                tblModel.addRow(tbData);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        // ESKI DEĞERI TABLODAN SILEN KISIM
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_patient_chart_Table.getModel();
        if (tbl_patient_chart_Table.getSelectedRowCount() == 1) {
            tbl_table_model.removeRow(tbl_patient_chart_Table.getSelectedRow());
        } else {
            if (tbl_patient_chart_Table.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is Empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Single Row For Delete..");
            }
        }


    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteActionPerformed
        // TODO add your handling code here:

        //SEÇTİĞİMİZ DEĞERİ DATABASE'DEN SILME
        try {
            String sql = "Delete from PatientLogin where PatientID =?";
            pst = con.prepareStatement(sql);

            pst.setString(1, txt_patıent_ıd.getText());

            pst.execute();

            JOptionPane.showMessageDialog(null, "Deleted");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        // SEÇTİĞİMİZ DEĞERİ TABLODAN SILME
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_patient_chart_Table.getModel();

        if (tbl_patient_chart_Table.getSelectedRowCount() == 1) {
            tb1Model.removeRow(tbl_patient_chart_Table.getSelectedRow());
        } else {
            if (tbl_patient_chart_Table.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is Empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Single Row For Delete..");
            }
        }
    }//GEN-LAST:event_btn_DeleteActionPerformed

    private void btn_show_all_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_show_all_dataActionPerformed
        // TODO add your handling code here:

        // TUM DATABESEDEKI DEĞERLERI TABLOYA YAZMA
        try {
            Statement st = con.createStatement();
            String sql = "select * from PatientLogin";
            rs = st.executeQuery(sql);

            while (rs.next()) {
                String PatientID = rs.getString("PatientID");
                String PatientName = rs.getString("PatientName");
                String Gender = rs.getString("Gender");
                String BloodGroup = rs.getString("BloodGroup");
                String Disease = rs.getString("Disease");
                String AdmitDate = rs.getString("AdmitDate");
                String RoomNO = rs.getString("RoomNO");
                String DoctorID = rs.getString("DoctorID");
                String DoctorName = rs.getString("DoctorName");
                String DischargeDate = rs.getString("DischargeDate");

                String tbData[] = {PatientID, PatientName, Gender, BloodGroup, Disease, AdmitDate, RoomNO, DoctorID, DoctorName, DischargeDate};
                DefaultTableModel tblModel = (DefaultTableModel) tbl_patient_chart_Table.getModel();
                tblModel.addRow(tbData);

            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_btn_show_all_dataActionPerformed

    private void btn_go_back_main_bridge1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_go_back_main_bridge1ActionPerformed
        //  Main_bridge bizi geri gönderiyor.
        Main_bridge MB = new Main_bridge();
        MB.setVisible(true);
        MB.pack();
        MB.setLocationRelativeTo(null);
        MB.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btn_go_back_main_bridge1ActionPerformed

    private void MI_SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_SAVEActionPerformed
        // Tablo'daki değerleri mouse tıklayarak seçmemizi sağlıyor.
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_patient_chart_Table.getModel();

        String tbl_Patient_ID = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 0).toString();
        String tbl_Patient_Name = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 1).toString();
        String tbl_Patient_Gender = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 2).toString();
        String tbl_Patient_Blood_Group = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 3).toString();
        String tbl_Disease = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 4).toString();
        String tbl_Admit_Date = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 5).toString();
        String tbl_Room_no = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 6).toString();
        String tbl_Doctor_ID = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 7).toString();
        String tbl_Doctor_Name = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 8).toString();
        String tbl_Discharge_Date = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 9).toString();

        // Menu bardaki save tuşuna bastığımız zaman çalışıyor ve Tablodaki şeçtiğimiz değeri, PATIENTS Values.txt dosyası oluşturup oraya kaydediyor.
        try {
            FileWriter Writer = new FileWriter("PATIENTS Values.txt", true);
            Writer.write(" PATIENT ID: " + tbl_Patient_ID + " PATIENT NAME: " + tbl_Patient_Name + " PATIENT GENDER: " + tbl_Patient_Gender + " BLOOD GROUP: " + tbl_Patient_Blood_Group + " DISEASE: " + tbl_Disease + " ADMIT DATE: " + tbl_Admit_Date + " ROOM NO: " + tbl_Room_no
                    + " DOCTOR ID: " + tbl_Doctor_ID + " DOCTOR NAME: " + tbl_Doctor_Name + " DISCHARGE DATE: " + tbl_Discharge_Date);
            Writer.close();
            JOptionPane.showMessageDialog(null, "SAVED");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR " + e);
        }
    }//GEN-LAST:event_MI_SAVEActionPerformed

    private void MI_CLOSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_CLOSEActionPerformed
        // Menu bardaki close tuşuna bastığımız zaman çalışıyor. ve sistemi kapatıyor.
        System.exit(0);
    }//GEN-LAST:event_MI_CLOSEActionPerformed

    private void MI_COLOR_CHOSERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_COLOR_CHOSERActionPerformed
        // Menu bardaki color chose tuşuna bastığımız zaman çalışıyor. Başlığın rengini değiştirme imkanı veriyor.
        java.awt.Color initialColor = java.awt.Color.BLUE;
        java.awt.Color clr = JColorChooser.showDialog(null, "SELECT COLOR", initialColor);
        JLB_BAŞLIK.setForeground(clr);

    }//GEN-LAST:event_MI_COLOR_CHOSERActionPerformed

    private void JMI_FILE_CHOOSERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMI_FILE_CHOOSERActionPerformed
        //  Menu bardaki FILE CHOOSER tuşuna bastığımız zaman bize dosya seçme imkanı sunuyor.
        // Seçtiğimiz dosyanın konumunu txt_file texttine yazıyor.

        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        txt_fıle.setText(filename);


    }//GEN-LAST:event_JMI_FILE_CHOOSERActionPerformed

    private void JCBM_STARTING_WORKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCBM_STARTING_WORKActionPerformed
        // Menu bardaki I'M STARTING WORK tuşuna bastığımız zaman Show all data, delete ve update tuşlarının enable özelliklerini açıyor.
        btn_update.setEnabled(JCBM_STARTING_WORK.isSelected());
        btn_Delete.setEnabled(JCBM_STARTING_WORK.isSelected());
        btn_show_all_data.setEnabled(JCBM_STARTING_WORK.isSelected());
    }//GEN-LAST:event_JCBM_STARTING_WORKActionPerformed

    private void JPMI_SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPMI_SAVEActionPerformed
        // Tablo'daki değerleri mouse tıklayarak seçmemizi sağlıyor.
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_patient_chart_Table.getModel();

        String tbl_Patient_ID = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 0).toString();
        String tbl_Patient_Name = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 1).toString();
        String tbl_Patient_Gender = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 2).toString();
        String tbl_Patient_Blood_Group = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 3).toString();
        String tbl_Disease = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 4).toString();
        String tbl_Admit_Date = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 5).toString();
        String tbl_Room_no = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 6).toString();
        String tbl_Doctor_ID = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 7).toString();
        String tbl_Doctor_Name = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 8).toString();
        String tbl_Discharge_Date = tb1Model.getValueAt(tbl_patient_chart_Table.getSelectedRow(), 9).toString();

        // Menu bardaki save tuşuyla aynı özelliği yapıyor sadece PATIENTS POPUP Values.txt dosyasına atıyor.
        try {
            FileWriter Writer = new FileWriter("PATIENTS POPUP Values.txt", true);
            Writer.write(" PATIENT ID: " + tbl_Patient_ID + " PATIENT NAME: " + tbl_Patient_Name + " PATIENT GENDER: " + tbl_Patient_Gender + " BLOOD GROUP: " + tbl_Patient_Blood_Group + " DISEASE: " + tbl_Disease + " ADMIT DATE: " + tbl_Admit_Date + " ROOM NO: " + tbl_Room_no
                    + " DOCTOR ID: " + tbl_Doctor_ID + " DOCTOR NAME: " + tbl_Doctor_Name + " DISCHARGE DATE: " + tbl_Discharge_Date);
            Writer.close();
            JOptionPane.showMessageDialog(null, "SAVED");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR " + e);
        }
    }//GEN-LAST:event_JPMI_SAVEActionPerformed
    private void showPopUp(MouseEvent e) {

        // Son mouseden barmağımızı çektiğimiz anda bize save ve delete JpopupMenu seçeneklerini açıyor
        JPM_ACCOUNTS.show(this, e.getX(), e.getY());
    }
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // Mousemizin bsılı tutam imkanını veriyor.
        if (evt.isPopupTrigger()) {
            showPopUp(evt);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // Mouse'den barmağımızı çekme imkanını veriyor.
        if (evt.isPopupTrigger()) {
            showPopUp(evt);
        }
    }//GEN-LAST:event_formMouseReleased

    private void JPMI_DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPMI_DELETEActionPerformed

        // DATABASE'DEN SILME
        try {
            String sql = "Delete from PatientLogin where PatientID =?";
            pst = con.prepareStatement(sql);

            pst.setString(1, txt_patıent_ıd.getText());

            pst.execute();

            JOptionPane.showMessageDialog(null, "Deleted");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        // TABLODAN SILME
        DefaultTableModel tb1Model = (DefaultTableModel) tbl_patient_chart_Table.getModel();

        if (tbl_patient_chart_Table.getSelectedRowCount() == 1) {
            tb1Model.removeRow(tbl_patient_chart_Table.getSelectedRow());
        } else {
            if (tbl_patient_chart_Table.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is Empty.");
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Single Row For Delete..");
            }
        }
    }//GEN-LAST:event_JPMI_DELETEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Patient_Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Patient_Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Patient_Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Patient_Chart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Patient_Chart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem JCBM_STARTING_WORK;
    private javax.swing.JLabel JLB_BAŞLIK;
    private javax.swing.JMenuItem JMI_FILE_CHOOSER;
    private javax.swing.JMenuItem JPMI_DELETE;
    private javax.swing.JMenuItem JPMI_SAVE;
    private javax.swing.JPopupMenu JPM_ACCOUNTS;
    private javax.swing.JMenuItem MI_CLOSE;
    private javax.swing.JMenuItem MI_COLOR_CHOSER;
    private javax.swing.JMenuItem MI_SAVE;
    private javax.swing.JButton btn_Delete;
    private javax.swing.JButton btn_go_back_main_bridge1;
    private javax.swing.JButton btn_show_all_data;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> cmbb_Blood_Group;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenu mı_File;
    private javax.swing.JTable tbl_patient_chart_Table;
    private javax.swing.JTextField txt_discharge_date;
    private javax.swing.JTextField txt_disease;
    private javax.swing.JTextField txt_doctor_name;
    private javax.swing.JTextField txt_doctor_ıd;
    private javax.swing.JTextField txt_fıle;
    private javax.swing.JTextField txt_patıent_ıd;
    private javax.swing.JTextField txt_room_no;
    // End of variables declaration//GEN-END:variables
}
